# 자바 프로그래밍 과제: 간단한 은행 시스템 시뮬레이션

## **목표**

제시된 요구 사항을 충족하는 자바 프로그램을 개발하세요. 이 프로그램은 간단한 은행 시스템을 시뮬레이션하여 사용자로 하여금 다음과 같은 작업을 수행할 수 있게 합니다:

1. 계좌 생성
2. 입금
3. 출금
4. 잔액 확인
5. 종료

이 과제는 제어문 (`if-else`, `switch-case`), 반복문 (`for`, `while`), 배열, 표준 입출력을 활용하여 작성해야 합니다.

## **지침**

1. **Account 클래스 생성**:

   - 다음과 같은 속성을 가진 `Account` 클래스를 정의하세요:
     - `int accountNumber`         // 계좌 번호
     - `String accountHolderName`  // 예금주 이름
     - `double balance`            // 잔고
   - 생성자를 포함하여 속성을 초기화하세요.
   - 입금, 출금, 계좌 정보 표시를 위한 메소드를 구현하세요.

2. **메인 프로그램 흐름**:

   - `main` 메소드에서 사용자에게 다음 옵션을 제공하는 메뉴를 표시하세요:
     1. 새 계좌 생성
     2. 입금
     3. 출금
     4. 잔액 확인
     5. 종료
   - 사용자가 종료를 선택할 때까지 프로그램이 계속 실행되도록 `while` 루프를 사용하세요.
   - 사용자의 메뉴 선택을 처리하기 위해 `switch-case` 문을 사용하세요.

3. **계좌 저장소 구현**:

   - 여러 개의 `Account` 객체를 저장하기 위해 배열을 사용하세요.
   - 최대 10개의 계좌를 생성할 수 있도록 하세요.
   - 생성된 계좌 수를 추적하기 위한 변수를 사용하세요.

4. **사용자 입력 및 출력 처리**:

   - `Scanner` 클래스를 사용하여 입력을 받으세요.
   - 계좌 번호 및 거래 금액 등 필요한 정보를 사용자에게 요청하세요.
   - 성공적인 거래나 오류(예: 잔액 부족)에 대한 적절한 메시지를 표시하세요.

5. **제어문과 반복문의 사용**:

   - 입금 및 출금 금액을 검증하기 위해 `if-else` 문을 활용하세요.
   - 계좌 번호를 기반으로 계좌를 검색하기 위해 `for` 루프를 사용하세요.

6. **예외 처리**:

   - 데이터 타입이 맞지 않은 경우를 포함하여 입출력시 일어날 수 있는 Exception에 대해 try-catch를 통해 예외 처리를 하세요. 

## **제출 방법**

- 이 리포지토리를 클론하여 작업하세요.
- 완료된 코드를 커밋하고 푸시하세요.
- 마감일까지 제출하세요.

## **마감일**

- 2024년 10월 4일 오후 11시 59분
